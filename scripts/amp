#!/usr/bin/env bash
set -eo pipefail

DEBIAN_FRONTEND=noninteractive apt-get install -yq gpiod

# script to control turning amp on and off
cat <<-'EOF' > /usr/local/bin/amp
#!/usr/bin/env bash
set -eo pipefail

GPIO=23

case "$1" in
  "on")
    gpioset gpiochip0 ${GPIO}=1
  ;;
  "off")
    gpioset gpiochip0 ${GPIO}=0
  ;;
  *)
    echo "unknown option. expecting exactly one argument of 'on' or 'off'" >&2
    exit 1
  ;;
esac
EOF
chmod a+x /usr/local/bin/amp

# expose serial port via http service
cat <<-'EOF' > /etc/systemd/system/amp.service
[Unit]
Description=Expose amp Serial control over HTTP
Wants=network-online.target
After=network-online.target

[Service]
ExecStart=/usr/local/bin/amp-httpd-rpi
Restart=always
RestartSec=2

[Install]
WantedBy=default.target
EOF
chmod a+x /usr/local/bin/amp-httpd-rpi

systemctl enable amp.service

# turn off amp after 15 min of idle time
cat <<-'EOF' > /usr/local/bin/amp-sleep
#!/usr/bin/env bash
set -eo pipefail

spotify_event=/var/run/spotify-last-event
amp_sleep=/var/run/amp-sleep

# last spotify event is newer than last time we turned off the amp
if [ $spotify_event -nt $amp_sleep ] ; then
  # we are not playing
  if grep -vqE '^playing$' $spotify_event; then
    age=$(expr $(date +%s) - $(date -r $spotify_event +%s))
    # event is older than 30 minutes
    if [ $age -gt 1800 ] ; then
      echo "turning amp off"
      /usr/local/bin/amp off
      touch $amp_sleep
    fi
  fi
fi
EOF
chmod a+x /usr/local/bin/amp-sleep

cat <<-'EOF' > /etc/systemd/system/amp-sleep.service
[Unit]
Description=Check if amp should sleep
Wants=amp-sleep.timer

[Service]
Type=oneshot
ExecStart=/usr/local/bin/amp-sleep

[Install]
WantedBy=default.target
EOF

cat <<-'EOF' > /etc/systemd/system/amp-sleep.timer
[Unit]
Description=Check if amp should sleep
Requires=amp-sleep.service

[Timer]
OnCalendar=minutely

[Install]
WantedBy=timers.target
EOF

systemctl enable amp-sleep.service
systemctl enable amp-sleep.timer